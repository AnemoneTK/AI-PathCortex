import os
import sys
import argparse
from pathlib import Path
from colorama import init, Fore, Style

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô colorama
init(autoreset=True)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))  # ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ 3 ‡∏£‡∏∞‡∏î‡∏±‡∏ö
sys.path.append(project_root)

try:
    from backend.src.utils.vector_creator import VectorCreator
    print(f"{Fore.GREEN}‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏• VectorCreator ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à{Style.RESET_ALL}")
except ImportError as e:
    print(f"{Fore.RED}‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏• VectorCreator: {str(e)}{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}‚ÑπÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ PYTHONPATH ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå src/utils/vector_creator.py{Style.RESET_ALL}")
    sys.exit(1)

def main():
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ argument parser
    parser = argparse.ArgumentParser(description='‡∏™‡∏£‡πâ‡∏≤‡∏á vector database ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ')
    parser.add_argument('--processed-data-dir', type=str, help='‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß')
    parser.add_argument('--vector-db-dir', type=str, help='‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• vector')
    parser.add_argument('--model', type=str, default='intfloat/multilingual-e5-large', 
                        help='‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏• SentenceTransformer ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ')
    parser.add_argument('--no-clear', action='store_true', 
                        help='‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• vector ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà')
    
    args = parser.parse_args()
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å arguments ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    processed_data_dir = args.processed_data_dir if args.processed_data_dir else os.path.join(project_root,"backend", "data", "processed")
    vector_db_dir = args.vector_db_dir if args.vector_db_dir else os.path.join(project_root,"backend", "data", "vector_db")
    
    print(f"\n{Fore.CYAN}{'='*50}")
    print(f"{Fore.CYAN}= ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Database ={Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'='*50}\n")
    
    print(f"{Fore.CYAN}üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß: {processed_data_dir}")
    print(f"{Fore.CYAN}üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• vector: {vector_db_dir}")
    print(f"{Fore.CYAN}üîÑ ‡πÇ‡∏°‡πÄ‡∏î‡∏• SentenceTransformer: {args.model}")
    print(f"{Fore.CYAN}üîÑ ‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°: {'‡πÑ‡∏°‡πà' if args.no_clear else '‡πÉ‡∏ä‡πà'}{Style.RESET_ALL}\n")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    os.makedirs(vector_db_dir, exist_ok=True)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• SentenceTransformer
    try:
        print(f"{Fore.CYAN}üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• SentenceTransformer...{Style.RESET_ALL}")
        from sentence_transformers import SentenceTransformer
        model = SentenceTransformer(args.model)
        print(f"{Fore.GREEN}‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• {args.model} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {str(e)}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}‚ÑπÔ∏è ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á vector ‡πÅ‡∏ó‡∏ô{Style.RESET_ALL}")
        model = None
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á VectorCreator
    try:
        vector_creator = VectorCreator(
            processed_data_dir=processed_data_dir,
            vector_db_dir=vector_db_dir,
            embedding_model=model,
            clear_vector_db=not args.no_clear
        )
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        results = vector_creator.create_all_embeddings()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        if results["job_embeddings"]["success"]:
            print(f"\n{Fore.CYAN}{'='*20} ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏ä‡∏µ‡∏û {'='*20}{Style.RESET_ALL}")
            test_queries = ["‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå", "data scientist", "‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£","‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ fullstack","fullstack ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏á"]
            for query in test_queries:
                print(f"\n{Fore.CYAN}üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: \"{query}\"{Style.RESET_ALL}")
                vector_creator.search_similar_jobs(query, k=3)
        
        if results["advice_embeddings"]["success"]:
            print(f"\n{Fore.CYAN}{'='*20} ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏ä‡∏µ‡∏û {'='*20}{Style.RESET_ALL}")
            test_queries = ["‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ resume ‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô", "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô", "‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"]
            for query in test_queries:
                print(f"\n{Fore.CYAN}üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: \"{query}\"{Style.RESET_ALL}")
                vector_creator.search_relevant_advices(query, k=3)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        print(f"\n{Fore.CYAN}{'='*20} ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Database {'='*20}{Style.RESET_ALL}")
        if results["job_embeddings"]["success"] and results["advice_embeddings"]["success"]:
            print(f"{Fore.GREEN}‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î{Style.RESET_ALL}")
            print(f"  - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: {results['job_embeddings']['vectors_count']} vectors")
            print(f"  - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: {results['advice_embeddings']['vectors_count']} vectors")
        else:
            print(f"{Fore.YELLOW}‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô{Style.RESET_ALL}")
            if results["job_embeddings"]["success"]:
                print(f"{Fore.GREEN}‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: {results['job_embeddings']['vectors_count']} vectors{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - {results['job_embeddings'].get('error', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}{Style.RESET_ALL}")
            
            if results["advice_embeddings"]["success"]:
                print(f"{Fore.GREEN}‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: {results['advice_embeddings']['vectors_count']} vectors{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - {results['advice_embeddings'].get('error', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Database: {str(e)}{Style.RESET_ALL}")

if __name__ == "__main__":
    main()